---

### Descripción General:
Este código implementa una simple lista de tareas donde los usuarios pueden agregar, marcar como completadas o eliminar tareas. La lista de tareas se guarda en el almacenamiento local del navegador (localStorage) para persistir entre recargas de página. El código utiliza elementos HTML como un campo de entrada, botones y una lista para interactuar con el usuario y reflejar cambios en la interfaz.

---

### Variables y Elementos del DOM:

- `const inputTarea = document.getElementById('nuevaTarea');`
  
  **Descripción**: 
  - Referencia al campo de entrada de texto donde el usuario escribe una nueva tarea.
  - Este campo de entrada tiene el `id="nuevaTarea"` en el HTML.
  
- `const botonAgregar = document.getElementById('agregarTarea');`
  
  **Descripción**: 
  - Referencia al botón que el usuario presiona para agregar una nueva tarea.
  - Este botón tiene el `id="agregarTarea"` en el HTML.
  
- `const listaDeTareas = document.getElementById('listaDeTareas');`
  
  **Descripción**: 
  - Referencia al contenedor donde se mostrarán las tareas.
  - Este contenedor tiene el `id="listaDeTareas"` en el HTML.
  
- `let tareas = JSON.parse(localStorage.getItem('tareas')) || [];`
  
  **Descripción**: 
  - El arreglo `tareas` contiene las tareas almacenadas. Si existen tareas en el almacenamiento local (`localStorage`), se cargan al inicio de la página con `JSON.parse()`. Si no hay tareas almacenadas, se inicializa como un arreglo vacío (`[]`).
  
---

### Funciones:

1. **`renderizarTareas`**:
   - **Descripción**: 
     - Actualiza la visualización de la lista de tareas en el DOM. Itera sobre el arreglo `tareas`, creando un elemento `div` para cada tarea y agregando clases para marcar las tareas como completadas o no completadas.
     - Inserta los botones de acción para cada tarea (marcar como completada y eliminar).
   - **Acción**: 
     - Modifica el contenido de `listaDeTareas` para mostrar la lista de tareas actualizada.
   - **Dependencias**: 
     - Depende de la variable `tareas` y del contenedor `listaDeTareas`.

2. **`agregarTarea`**:
   - **Descripción**: 
     - Agrega una nueva tarea al arreglo `tareas` si el campo de entrada no está vacío. Luego limpia el campo de entrada, guarda las tareas en el almacenamiento local y vuelve a renderizar la lista de tareas.
   - **Acción**: 
     - Agrega un objeto de tarea con las propiedades `texto` y `completada` (inicialmente `false`) al arreglo `tareas`.
   - **Dependencias**: 
     - Depende de las variables `inputTarea` y `tareas`.

3. **`marcarCompletada`**:
   - **Descripción**: 
     - Alterna el estado de la propiedad `completada` de una tarea. Si la tarea estaba marcada como completada (`true`), la marca como no completada (`false`), y viceversa.
     - Guarda el estado actualizado en el almacenamiento local y vuelve a renderizar la lista de tareas.
   - **Acción**: 
     - Modifica la propiedad `completada` de la tarea en el índice especificado por `index`.
   - **Dependencias**: 
     - Depende de la variable `tareas` y del índice `index` de la tarea.

4. **`eliminarTarea`**:
   - **Descripción**: 
     - Elimina una tarea del arreglo `tareas` utilizando su índice. Después de eliminarla, actualiza el almacenamiento local y vuelve a renderizar la lista de tareas.
   - **Acción**: 
     - Utiliza el método `splice()` para eliminar la tarea en el índice especificado por `index`.
   - **Dependencias**: 
     - Depende de la variable `tareas` y del índice `index` de la tarea.

5. **`actualizarLocalStorage`**:
   - **Descripción**: 
     - Guarda el arreglo `tareas` en el almacenamiento local del navegador. Utiliza `JSON.stringify()` para convertir el arreglo a una cadena JSON antes de almacenarlo.
   - **Acción**: 
     - Guarda las tareas en `localStorage` bajo la clave `'tareas'`.

---

### Eventos:

- **Evento de click en `botonAgregar`**:
  
  ```javascript
  botonAgregar.addEventListener('click', agregarTarea);
  ```
  
  **Descripción**:
  - Este evento se dispara cuando el usuario hace clic en el botón de "Agregar tarea". Llama a la función `agregarTarea()` para agregar una nueva tarea.

- **Evento `DOMContentLoaded`**:
  
  ```javascript
  document.addEventListener('DOMContentLoaded', renderizarTareas);
  ```
  
  **Descripción**:
  - Este evento se dispara cuando el contenido del DOM ha sido completamente cargado. Llama a la función `renderizarTareas()` para renderizar la lista de tareas al cargar la página.

---

### Flujo de la Aplicación:

1. **Cargar la página**:
   - Al cargar la página, las tareas almacenadas en el `localStorage` se cargan en el arreglo `tareas` y se renderizan en el contenedor `listaDeTareas` mediante la función `renderizarTareas()`.

2. **Agregar una tarea**:
   - Cuando el usuario escribe el texto de una tarea en el campo de entrada y hace clic en el botón "Agregar tarea", se ejecuta la función `agregarTarea()`, que:
     - Añade la nueva tarea al arreglo `tareas`.
     - Actualiza el almacenamiento local.
     - Vuelve a renderizar la lista de tareas.

3. **Marcar una tarea como completada**:
   - Al hacer clic en el botón "✔️" de una tarea, se ejecuta la función `marcarCompletada(index)`, que alterna el estado de completado de la tarea en el índice correspondiente y actualiza la vista.

4. **Eliminar una tarea**:
   - Al hacer clic en el botón "❌" de una tarea, se ejecuta la función `eliminarTarea(index)`, que elimina la tarea correspondiente y actualiza la vista y el almacenamiento local.

---

### Notas Finales:

- **Persistencia en `localStorage`**: 
  - Las tareas permanecen guardadas en el almacenamiento local entre sesiones y recargas de la página, gracias a la función `actualizarLocalStorage`.
  
- **Interacción del Usuario**:
  - El usuario puede agregar, marcar como completada o eliminar tareas a través de los botones interactivos generados para cada tarea.

- **Estilos y clases**:
  - Las tareas completadas tienen la clase `completada`, lo que permite aplicar estilos específicos (como un "tachado" del texto).

---

Esta es la documentación completa del código, que cubre la estructura general y cómo funcionan las distintas funciones y eventos en conjunto para permitir la gestión de tareas. Si tienes más preguntas o necesitas aclaraciones adicionales, ¡no dudes en preguntar!